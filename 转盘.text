<!--
 * @Author: error: git config user.name && git config user.email & please set dead value or install git
 * @Date: 2022-07-11 09:54:44
 * @LastEditors: error: git config user.name && git config user.email & please set dead value or install git
 * @LastEditTime: 2022-07-11 11:22:41
 * @FilePath: \qzd-website-pc\src\pages\test.vue
 * @Description: 这是默认设置,请设置`customMade`, 打开koroFileHeader查看配置 进行设置: https://github.com/OBKoro1/koro1FileHeader/wiki/%E9%85%8D%E7%BD%AE
-->
// 第一种
<template>
  <div id="bg">
    <img @click="go" class="pointer" src="" alt="pointer" />
    <img ref="turntable" class="turntable" src="~@/assets/image/innovate/arrow.png" alt="turntable" />
    <h1>你的抽奖次数为:{{ goTimes }}</h1>
  </div>
</template>
<script>
  export default {
    data() {
      return {
        isGo: false, // 是否正在执行动画
        oTurntable: '', // 执行动画的对象
        randomDeg: 0, // 即将旋转的度数
        lastDeg: 0, // 上一次旋转的度数
        goTimes: 5 // 抽奖次数
      }
    },
    methods: {
      // 这里是调自己的后端接口
      //   selectPersonResultSum() {
      //     var vm = this
      //     vm.userId = localStorage.getItem('userId')
      //     vm.$axios.get('/personResult/selectPersonResultSum/' + vm.userId).then(function(response) {
      //       if (response.data.code === '0000') {
      //         vm.num = response.data.data.num
      //         if (vm.num % 10 == 0) {
      //           vm.goTimes = 1
      //         }
      //       } else if (response.data.code === '1111') {
      //         vm.$message({
      //           message: '',
      //           type: 'info'
      //         })
      //       }
      //     })
      //   },
      go() {
        if (!this.isGo && this.goTimes > 0) {
          this.getNumber()
        } else if (!this.isGo && this.goTimes <= 0) {
          alert('抱歉您的抽奖次数用完了')
        } else {
          return false
        } // 表明正在抽奖，未结束 点击无效
      },
      getRandom(n, m) {
        // 该方法产生[n,m]之间随机数
        let result = Math.floor(Math.floor(Math.random() * (m - n + 1) + n))
        return result
      },
      getNumber() {
        /*  
        调整中奖概率(让每次旋转前指针都在初始位置，这样才准确)
        想转到第一项，需要转：360/7*0 + 360/7/2;   --->该项为超级大奖奖项
        想转到第二项，需要转：360/7*1 + 360/7/2;
        想转到第三项，需要转：360/7*2 + 360/7/2;
        想转到第四项，需要转：360/7*3 + 360/7/2;
        想转到第五项，需要转：360/7*4 + 360/7/2;
        想转到第六项，需要转：360/7*5 + 360/7/2;
        想转到第七项，需要转：360/7*6 + 360/7/2;   --->该项为未中奖项
      */
        let number = this.getRandom(0, 100)
        let randomSlip = this.getRandom(2, 5)
        let caseNum
        if (number === 0) {
          caseNum = 0 // 粗略概率为1%
        } else if (number > 0 && number < 5) {
          caseNum = 1 // 粗略概率为5%
        } else if (number >= 5 && number < 10) {
          caseNum = 2 // 粗略概率为5%
        } else if (number >= 10 && number < 15) {
          caseNum = 3 // 粗略概率为5%
        } else if (number >= 15 && number < 20) {
          caseNum = 4 // 粗略概率为5%
        } else if (number >= 20 && number < 25) {
          caseNum = 5 // 粗略概率为5%
        } else {
          caseNum = 6 // 粗略概率为75%
        }
        console.log('caseNum', caseNum)
        switch (caseNum) {
          case 0:
            this.ratating((360 / 7) * 0 + 360 / 7 / randomSlip, '0')
            break
          case 1:
            this.ratating((360 / 7) * 1 + 360 / 7 / randomSlip, '1')
            break
          case 2:
            this.ratating((360 / 7) * 2 + 360 / 7 / randomSlip, '2')
            break
          case 3:
            this.ratating((360 / 7) * 3 + 360 / 7 / randomSlip, '3')
            break
          case 4:
            this.ratating((360 / 7) * 4 + 360 / 7 / randomSlip, '4')
            break
          case 5:
            this.ratating((360 / 7) * 5 + 360 / 7 / randomSlip, '5')
            break
          default:
            this.ratating((360 / 7) * 6 + 360 / 7 / randomSlip, '6')
            break
        }
      },
      ratating(deg, text) {
        this.goTimes--
        this.isGo = true
        let times = this.getRandom(3, 6) // 圈数(从用户体验角度考虑，设计随机转3-6圈。最少3圈，最多6圈)

        this.randomDeg = deg + 360 * times // 记录这次要旋转的度数(传来的度数+圈数)
        let realDeg = 360 - (this.lastDeg % 360) + this.lastDeg + this.randomDeg
        /* 上次指针离初始状态的度数 + 上次的度数 + 这次要旋转的度数
      (这样的目的是为了每次旋转都从原点开始，保证数据准确) */
        this.oTurntable.style.transform = `rotate(${realDeg}deg)`
        setTimeout(() => {
          this.isGo = false
          console.log(`以原点为基准共旋转了${this.randomDeg}度,
        			以一圈为基准相对旋转了${this.randomDeg % 360}度,最终结果为${text}`)
          this.lastDeg = realDeg // 把这次度数存储起来，方便下一次获取
        }, 4000) // 4000ms为css里面写的执行动画的时间
      }
    },
    mounted() {
      this.oTurntable = this.$refs.turntable
    }
  }
</script>

<style scoped>
  #bg {
    padding-top: 90px;
    width: 650px;
    height: 600px;
    margin: 0 auto;
    position: relative;
    background: url('~@/assets/image/innovate/lubo.jpg') no-repeat;
  }
  .pointer {
    position: absolute;
    z-index: 10;
    top: 650px;
    left: 247px;
  }
  .turntable {
    position: absolute;
    z-index: 5;
    top: 150px;
    left: 249px;
    transition: all 4s; /*动画执行时间为4s */
    transform-origin: 87px 130px;
  }
</style>

// 第二种
<!--
 * @Author: error: git config user.name && git config user.email & please set dead value or install git
 * @Date: 2022-07-11 09:54:44
 * @LastEditors: error: git config user.name && git config user.email & please set dead value or install git
 * @LastEditTime: 2022-07-11 16:14:32
 * @FilePath: \qzd-website-pc\src\pages\test.vue
 * @Description: 这是默认设置,请设置`customMade`, 打开koroFileHeader查看配置 进行设置: https://github.com/OBKoro1/koro1FileHeader/wiki/%E9%85%8D%E7%BD%AE
-->
<template>
  <div id="box">
    <ul id="ul">
      <li :class="[activeIndex === 0 ? 'li active' : 'li']">1</li>
      <li :class="[activeIndex === 1 ? 'li active' : 'li']">2</li>
      <li :class="[activeIndex === 2 ? 'li active' : 'li']">3</li>
      <li :class="[activeIndex === 7 ? 'li active' : 'li']">8</li>
      <li class="li1" id="chou" @click="handleClick">点击</li>
      <li :class="[activeIndex === 3 ? 'li active' : 'li']">4</li>
      <li :class="[activeIndex === 6 ? 'li active' : 'li']">7</li>
      <li :class="[activeIndex === 5 ? 'li active' : 'li']">6</li>
      <li :class="[activeIndex === 4 ? 'li active' : 'li']">5</li>
    </ul>
  </div>
</template>
<script>
  export default {
    data() {
      return {
        activeIndex: -1,
        chose1: null,
        status: 'start',
        maxStart: 2
      }
    },
    watch: {
      status(val) {
        console.log('val====', val)
        if (val === 'end' && this.maxStart) {
          let date = new Date().getTime()
          this.chose1.move(4, date)
        }
      }
    },
    methods: {
      handleClick() {
        let date = new Date().getTime()
        this.chose1.move(5, date)
        console.log('this.chose1', this.chose1)
      }
    },
    mounted() {
      let that = this
      function Chose(ele) {
        this.status = 'start'
        this.box = document.getElementById(ele)
        this.li = [1, 2, 3, 4, 5, 6, 7, 8]
        this.cli = document.getElementById('chou')
        this.timer = null
        this.speed = 50 // 定时器触发的速度
        this.count = 0 // 计数变量
        // this.cli.onclick = () => {
        //   let date = new Date().getTime()
        //   this.move(num, date)
        // }
      }

      Chose.prototype.move = function(num, date) {
        this.timer = setTimeout(() => {
          let date2 = new Date().getTime()
          that.activeIndex = this.count
          this.count++
          if (this.count > 7) {
            this.count = 0
          }
          if (date2 - date > 2000) {
            // 如果时间大于2秒, 则让速度慢下来
            this.speed += 30
            if (num - 1 === that.activeIndex && date2 - date > 5000) {
              // 如果时间大于5秒, 并且转到了奖品项上, 则停止计时器
              setTimeout(() => {
                console.log(that.activeIndex, '=====>')
                this.speed = 50
                this.status = 'end'
                that.status = 'end'
                that.maxStart--
              }, 0)
              return
            }
          }
          this.move(num, date)
        }, this.speed)
      }
      // 这个是索引
      this.chose1 = new Chose()
    }
  }
</script>

<style scoped>
  #box {
    width: 400px;
    height: 400px;
    margin: 100px auto;
    position: relative;
    background-color: pink;
  }
  #ul {
    width: 100%;
    height: 100%;
    position: absolute;
    padding: 20px;
    box-sizing: border-box;
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
  }
  .li,
  .li1 {
    width: 30%;
    height: 30%;
    background-color: skyblue;
    list-style: none;
  }
  .active {
    background-color: #fff;
  }
  .active1 {
    background-color: red;
  }
</style>

// 两种一起转
<!--
 * @Author: error: git config user.name && git config user.email & please set dead value or install git
 * @Date: 2022-07-11 09:54:44
 * @LastEditors: error: git config user.name && git config user.email & please set dead value or install git
 * @LastEditTime: 2022-07-11 17:03:38
 * @FilePath: \qzd-website-pc\src\pages\test.vue
 * @Description: 这是默认设置,请设置`customMade`, 打开koroFileHeader查看配置 进行设置: https://github.com/OBKoro1/koro1FileHeader/wiki/%E9%85%8D%E7%BD%AE
-->
<template>
  <div id="box">
    <ul id="ul">
      <li :class="computedStyle(0)">1</li>
      <li :class="computedStyle(1)">2</li>
      <li :class="computedStyle(2)">3</li>
      <li :class="computedStyle(7)">8</li>
      <li class="li1" id="chou" @click="handleClick">点击</li>
      <li :class="computedStyle(3)">4</li>
      <li :class="computedStyle(6)">7</li>
      <li :class="computedStyle(5)">6</li>
      <li :class="computedStyle(4)">5</li>
    </ul>
  </div>
</template>
<script>
  export default {
    data() {
      return {
        activeIndex: -1,
        activeIndex1: -1,
        chose1: null,
        status: 'start',
        maxStart: 2
      }
    },
    watch: {
      status(val) {
        console.log('val====', val)
        if (val === 'end' && this.maxStart) {
          //   let date = new Date().getTime()
          //   this.chose1.move(4, date)
        }
      }
    },
    computed: {
      computedStyle() {
        return (activeIndex) => {
          if (activeIndex === this.activeIndex && activeIndex === this.activeIndex1) {
            return 'special li'
          }
          if (activeIndex === this.activeIndex) {
            return 'active li'
          }
          if (activeIndex === this.activeIndex1) {
            return 'active1 li'
          }
          return 'li'
        }
      }
    },
    methods: {
      handleClick() {
        let date = new Date().getTime()
        this.chose1.move(5, date)
        this.chose2.move(6, date)
      }
    },
    mounted() {
      let that = this
      function Chose() {
        this.status = 'start'
        // this.box = document.getElementById(ele)
        this.li = [1, 2, 3, 4, 5, 6, 7, 8]
        this.cli = document.getElementById('chou')
        this.timer = null
        this.speed = 50 // 定时器触发的速度
        this.count = 0 // 计数变量
        // this.cli.onclick = () => {
        //   let date = new Date().getTime()
        //   this.move(num, date)
        // }
        this.move = (num, date) => {
          this.timer = setTimeout(() => {
            let date2 = new Date().getTime()
            that.activeIndex = this.count

            this.count++
            if (this.count > 7) {
              this.count = 0
            }
            if (date2 - date > 2000) {
              // 如果时间大于2秒, 则让速度慢下来
              this.speed += 30
              if (num - 1 === that.activeIndex && date2 - date > 5000) {
                // 如果时间大于5秒, 并且转到了奖品项上, 则停止计时器
                setTimeout(() => {
                  this.speed = 50
                  this.status = 'end'
                  that.status = 'end'
                  that.maxStart--
                }, 0)
                return
              }
            }
            this.move(num, date)
          }, this.speed)
        }
      }

      //   Chose.prototype.move = function(num, date) {
      //     this.timer = setTimeout(() => {
      //       let date2 = new Date().getTime()
      //       that.activeIndex = this.count
      //       that.activeIndex1 = this.count
      //       this.count++
      //       if (this.count > 7) {
      //         this.count = 0
      //       }
      //       if (date2 - date > 2000) {
      //         // 如果时间大于2秒, 则让速度慢下来
      //         this.speed += 30
      //         if ((num - 1 === that.activeIndex || num - 1 === that.activeIndex1) && date2 - date > 5000) {
      //           // 如果时间大于5秒, 并且转到了奖品项上, 则停止计时器
      //           setTimeout(() => {
      //             this.speed = 50
      //             this.status = 'end'
      //             that.status = 'end'
      //             that.maxStart--
      //           }, 0)
      //           return
      //         }
      //       }
      //       this.move(num, date)
      //     }, this.speed)
      //   }
      function Chose1() {
        this.status = 'start'
        // this.box = document.getElementById(ele)
        this.li = [1, 2, 3, 4, 5, 6, 7, 8]
        this.cli = document.getElementById('chou')
        this.timer = null
        this.speed = 50 // 定时器触发的速度
        this.count = 0 // 计数变量
        // this.cli.onclick = () => {
        //   let date = new Date().getTime()
        //   this.move(num, date)
        // }
        this.move = (num, date) => {
          this.timer = setTimeout(() => {
            let date2 = new Date().getTime()
            that.activeIndex1 = this.count

            this.count++
            if (this.count > 7) {
              this.count = 0
            }
            if (date2 - date > 2000) {
              // 如果时间大于2秒, 则让速度慢下来
              this.speed += 30
              if (num - 1 === that.activeIndex1 && date2 - date > 5000) {
                // 如果时间大于5秒, 并且转到了奖品项上, 则停止计时器
                setTimeout(() => {
                  this.speed = 50
                  this.status = 'end'
                  that.status = 'end'
                  that.maxStart--
                }, 0)
                return
              }
            }
            this.move(num, date)
          }, this.speed)
        }
      }
      // 这个是索引
      this.chose1 = new Chose()
      this.chose2 = new Chose1()
    }
  }
</script>

<style scoped>
  #box {
    width: 400px;
    height: 400px;
    margin: 100px auto;
    position: relative;
    background-color: pink;
  }
  #ul {
    width: 100%;
    height: 100%;
    position: absolute;
    padding: 20px;
    box-sizing: border-box;
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
  }
  .li,
  .li1 {
    width: 30%;
    height: 30%;
    background-color: skyblue;
    list-style: none;
  }
  .special {
    background-color: gold;
  }
  .active {
    background-color: #fff;
  }
  .active1 {
    background-color: red;
  }
</style>

